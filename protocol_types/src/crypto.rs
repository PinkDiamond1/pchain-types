/*
 Copyright (c) 2022 ParallelChain Lab

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */



/// An Ed25519 signature. These are generated by external accounts to authorize transactions,
/// and by validators to create proposals and cast votes during consensus.
/// 
/// Its length is always 64 bytes
pub type Signature = Vec<u8>;
pub fn signature_is_correct_len(sig: &Signature) -> bool {
    sig.len() == 64
}

/// An Ed25519 secret key. These are used to produce Ed25519 signatures. 
/// 
/// Its length is always 32 bytes.
pub type SecretKey = Vec<u8>;
pub fn sk_is_correct_len(sk: &SecretKey) -> bool {
    sk.len() == 32
}

/// PublicAddress is either:
/// - an Ed25519 public key representing an external account, or
/// - a contract address.
/// 
/// Its length is always 32 bytes.
pub type PublicAddress = Vec<u8>;
pub fn pa_is_correct_len(pa: &PublicAddress) -> bool {
    pa.len() == 32
}

/// A SHA256 hash. Used as block and transaction hashes, as well as to form Merkle tries.
/// 
/// Its length is always 32 bytes.
pub type Sha256Hash = Vec<u8>;
pub fn sha256hash_is_correct_len(hash: &Sha256Hash) -> bool {
    hash.len() == 32
}
